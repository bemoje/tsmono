import assert from 'node:assert/strict'
import { lancasterStemmer as fn } from './lancasterStemmer'

describe(fn.name, () => {
  it('should work', () => {
    expect(() => {
      assert.equal(fn('analytic'), fn('AnAlYtIc'), 'should be case insensitive')
      assert.equal(fn(''), '', 'should not fail on empy inputs')
      assert.ok(!fn('abasia').endsWith('ia'), 'should drop ia$')
      assert.ok(!fn('abaya').endsWith('a'), 'should drop a$')
      assert.ok(/[^b]b$/.test(fn('ebb')), 'should transform bb$ into b')
      assert.ok(fn('analytic').endsWith('ys'), 'should transform ytic$ into ys')
      assert.ok(!fn('zymotic').endsWith('ic'), 'should drop ic$')
      assert.ok(fn('franc').endsWith('nt'), 'should transform nc$ into nt')
      assert.ok(/[^d]d$/.test(fn('add')), 'should transform dd$ into d')
      assert.ok(fn('aeried').endsWith('y'), 'should transform ied$ into y')
      assert.ok(fn('exceed').endsWith('cess'), 'should transform ceed$ into cess')
      assert.ok(fn('zeed').endsWith('ee'), 'should transform eed$ into ee')
      assert.ok(!fn('bowed').endsWith('ed'), 'should drop ed$')
      assert.ok(!fn('boyhood').endsWith('hood'), 'should drop hood$')
      assert.ok(!fn('brae').endsWith('e'), 'should drop e$')
      assert.ok(fn('disbelief').endsWith('liev'), 'should transform lief$ into liev')
      assert.ok(!fn('khalif').endsWith('if'), 'should drop if$')
      assert.ok(!fn('giggling').endsWith('ing'), 'should drop ing$')
      // `es$` is also removed.
      assert.ok(fn('intermarriages').endsWith('y'), 'should transform iag$ into y')
      assert.ok(!fn('jetlag').endsWith('ag'), 'should drop ag$')
      assert.ok(/[^g]g$/.test(fn('magg')), 'should transform gg$ into g')
      assert.ok(!fn('mammoth').endsWith('th'), 'should drop th$')
      assert.ok(fn('aguish').endsWith('ct'), 'should transform guish$ into ct')
      assert.ok(!fn('angelfish').endsWith('ish'), 'should drop ish$')
      assert.ok(!fn('anti').endsWith('i'), 'should drop i$')
      // The ous$ will first remove, then the transformation.
      assert.ok(fn('anxious').endsWith('y'), 'should transform i$ into y')
      assert.ok(fn('basij').endsWith('id'), 'should transform ij$ into id')
      // Sion > j, fuj > fus.
      assert.ok(fn('affusion').endsWith('fus'), 'should transform fuj$ into fus')
      // Sion > j, uj > ud.
      assert.ok(fn('collusion').endsWith('ud'), 'should transform uj$ into ud')
      // Sion > j, oj > od.
      assert.ok(fn('corrosion').endsWith('od'), 'should transform oj$ into od')
      // Sion > j, hej > her.
      assert.ok(fn('adhesion').endsWith('her'), 'should transform hej$ into her')
      // Sion > j, verj > vert.
      assert.ok(fn('version').endsWith('vert'), 'should transform verj$ into vert')
      // Sion > j, misj > mit.
      // For some unknown reason the original code returns `misj`.
      assert.ok(fn('mission').endsWith('mit'), 'should transform misj$ into mit')
      // Sion > j, nj > nd.
      assert.ok(fn('comprehension').endsWith('nd'), 'should transform nj$ into nd')
      assert.ok(fn('svaraj').endsWith('s'), 'should transform j$ into s')
      assert.ok(!fn('classifiable').endsWith('ifiabl'), 'should drop ifiabl$')
      assert.ok(fn('compliable').endsWith('y'), 'should transform iabl$ into y')
      assert.ok(!fn('compostable').endsWith('abl'), 'should drop abl$')
      assert.ok(!fn('conductible').endsWith('ibl'), 'should drop ibl$')
      assert.ok(fn('airmobile').endsWith('bl'), 'should transform bil$ into bl')
      assert.ok(fn('curricle').endsWith('c'), 'should transform cl$ into c')
      assert.ok(fn('beautiful').endsWith('y'), 'should transform iful$ into y')
      assert.ok(!fn('behoveful').endsWith('ful'), 'should drop ful$')
      assert.ok(!fn('blameful').endsWith('ul'), 'should drop ul$')
      assert.ok(!fn('akenial').endsWith('ial'), 'should drop ial$')
      assert.ok(!fn('annual').endsWith('ual'), 'should drop ual$')
      assert.ok(!fn('anodal').endsWith('al'), 'should drop al$')
      assert.ok(/[^l]l$/.test(fn('anthill')), 'should transform ll$ into l')
      assert.ok(!fn('anthodium').endsWith('ium'), 'should drop ium$')
      assert.ok(!fn('antirrhinum').endsWith('um'), 'should drop um$')
      assert.ok(!fn('apism').endsWith('ism'), 'should drop ism$')
      assert.ok(/[^m]m$/.test(fn('shtumm')), 'should transform mm$ into m')
      // Untestable, although the `j` test tests this also.
      // 'should transform sion$ into j'
      assert.ok(fn('affluxion').endsWith('ct'), 'should transform xion$ into ct')
      assert.ok(!fn('alation').endsWith('ion'), 'should drop ion$')
      assert.ok(!fn('abecedarian').endsWith('ian'), 'should drop ian$')
      assert.ok(!fn('acaridan').endsWith('an'), 'should drop an$')
      assert.ok(fn('armozeen').endsWith('een'), 'should protect een$')
      assert.ok(!fn('bandsmen').endsWith('en'), 'should drop en$')
      assert.ok(/[^n]n$/.test(fn('jotunn')), 'should transform nn$ into n')
      assert.ok(!fn('judgeship').endsWith('ship'), 'should drop ship$')
      assert.ok(/[^p]p$/.test(fn('schlepp')), 'should transform pp$ into p')
      assert.ok(!fn('teacher').endsWith('er'), 'should drop er$')
      assert.ok(fn('shapewear').endsWith('ear'), 'should protect ear$')
      assert.ok(!fn('alcazar').endsWith('ar'), 'should drop ar$')
      assert.ok(!fn('superior').endsWith('ior'), 'should drop ior$')
      assert.ok(!fn('advisor').endsWith('or'), 'should drop or$')
      assert.ok(!fn('tailleur').endsWith('ur'), 'should drop ur$')
      assert.ok(/[^r]r$/.test(fn('whirr')), 'should transform rr$ into r')
      assert.ok(fn('accipitral').endsWith('t'), 'should transform tr$ into t')
      assert.ok(fn('aerier').endsWith('y'), 'should transform ier$ into y')
      assert.ok(fn('abbotcies').endsWith('y'), 'should transform ies$ into y')
      assert.ok(fn('abiosis').endsWith('s'), 'should transform sis$ into s')
      assert.ok(!fn('abris').endsWith('is'), 'should drop is$')
      assert.ok(!fn('abruptness').endsWith('ness'), 'should drop ness$')
      assert.ok(fn('abyss').endsWith('ss'), 'should protect ss$')
      assert.ok(!fn('acetous').endsWith('ous'), 'should drop ous$')
      assert.ok(!fn('acinus').endsWith('us'), 'should drop us$')
      assert.ok(!fn('abacs').endsWith('s'), 'should drop s$')
      assert.ok(fn('supplicat').endsWith('ply'), 'should transform plicat$ into ply')
      assert.ok(!fn('surat').endsWith('at'), 'should drop at$')
      assert.ok(!fn('tanglement').endsWith('ment'), 'should drop ment$')
      assert.ok(!fn('temperament').endsWith('ent'), 'should drop ent$')
      assert.ok(!fn('tenant').endsWith('ant'), 'should drop ant$')
      assert.ok(fn('transcript').endsWith('rib'), 'should transform ript$ into rib')
      assert.ok(fn('absorptance').endsWith('orb'), 'should transform orpt$ into orb')
      assert.ok(fn('aeroduct').endsWith('duc'), 'should transform duct$ into duc')
      assert.ok(fn('consumpt').endsWith('sum'), 'should transform sumpt$ into sum')
      assert.ok(fn('discept').endsWith('ceiv'), 'should transform cept$ into ceiv')
      assert.ok(fn('absolute').endsWith('olv'), 'should transform olut$ into olv')
      assert.ok(fn('fantasist').endsWith('sist'), 'should protect sist$')
      assert.ok(!fn('fashionist').endsWith('ist'), 'should drop ist$')
      assert.ok(/[^t]t$/.test(fn('forebitt')), 'should transform tt$ into t')
      assert.ok(!fn('antiquity').endsWith('iqu'), 'should drop iqu$')
      assert.ok(fn('trialogue').endsWith('og'), 'should transform ogu$ into og')
      // Untestable, although the `j` test tests this also.
      // 'should transform siv$ into j'
      assert.ok(fn('apperceive').endsWith('eiv'), 'should protect eiv$')
      assert.ok(!fn('leitmotiv').endsWith('iv'), 'should drop iv$')
      assert.ok(fn('amble').endsWith('bl'), 'should transform bly$ into bl')
      assert.ok(fn('aerily').endsWith('y'), 'should transform ily$ into y')
      assert.ok(fn('misapply').endsWith('ply'), 'should protect ply$')
      assert.ok(!fn('miscellaneously').endsWith('ly'), 'should drop ly$')
      assert.ok(fn('misology').endsWith('og'), 'should transform ogy$ into og')
      assert.ok(fn('morphography').endsWith('ph'), 'should transform phy$ into ph')
      assert.ok(fn('neurotomy').endsWith('om'), 'should transform omy$ into om')
      assert.ok(fn('otoscopy').endsWith('op'), 'should transform opy$ into op')
      assert.ok(!fn('outcity').endsWith('ity'), 'should drop ity$')
      assert.ok(!fn('peripety').endsWith('ety'), 'should drop ety$')
      assert.ok(fn('realty').endsWith('l'), 'should transform lty$ into l')
      assert.ok(!fn('registry').endsWith('istry'), 'should drop istry$')
      assert.ok(!fn('repetitionary').endsWith('ary'), 'should drop ary$')
      assert.ok(!fn('repository').endsWith('ory'), 'should drop ory$')
      assert.ok(!fn('requalify').endsWith('ify'), 'should drop ify$')
      assert.ok(fn('bouncy').endsWith('nt'), 'should transform ncy$ into nt')
      assert.ok(!fn('retiracy').endsWith('acy'), 'should drop acy$')
      assert.ok(!fn('showbiz').endsWith('iz'), 'should drop iz$')
      assert.ok(fn('agryze').endsWith('ys'), 'should transform yz$ into ys')
    }).not.toThrow()
  })
})
