const a = [
  '+275760-11-31T21:56:00.999Z',
  '+275759-11-31T21:56:00.999Z',
  '+290000-11-31T21:56:00.999Z',
  '+250000-11-31T21:56:00.999Z',
  '+100000-11-31T21:56:00.999Z',
  '+275760-11-30T21:55.22.999Z',
  '+275759-11-30T22:55.22.999Z',
  '+275759-11-30T23:55:22.992Z',
  '+290000-11-31T21:56.22.999Z',
  '+250000-11-31T21:56.22.999Z',
  // '+100000.11.31 21:56:22.999Z',
  // '+10000.11.31 21:56:999Z',
  // '+00000.11.31 21:56:999Z',
  // '2000.11.31 21:56:999Z',
  // '+10000.11.31 21:56:999Z',
  // '2023.11.31 21:56:999Z',
  // '0110.11.31 21:56:999Z',
  // '+10004.11.31 21:56.22:999Z',
  // '0099.11.31 21:56:999Z',
  // '0109.11.31 21:56:999Z',
  '000',
  '0000',
  '0090',
  '2400',
  '9999',
  '1000.',
  '1000.0',
  '1000.00',
  '1000.01',
  '1000.4',
  '1000.04',
  '1000.10',
  '1000.12',
  '1000.13',
  '2023.10.',
  '2023.10.0',
  '2023.10.9',
  '2023.10.10',
  '2023.10.00',
  '2023.10.31',
  '2023.10.32',
  '2023.10.31',
  '2023.10.31 01',
  '2023.10.31 00',
  '2023.10.31 01',
  '2023.10.31 0',
  '2023.10.31 21',
  '2023.10.31 23',
  '2023.10.31 24',
  '2023.10.31 21.00',
  '2023.10.31 21.0',
  '2023.10.31 21.2',
  '2023.10.31 21.22',
  '2023.10.31 21.60',
  '2023.10.31 21.22.',
  '2023.10.31 21.22.1',
  '2023.10.31 21.22.11',
  '2023.10.31 21.22.11.',
  '2023.10.31 21.22.11.000',
  '2023.10.31 21.22.11.0',
  '2023.10.31 21.22.11.004',
  '2023.10.31 21.22.11.41',
  '2023.10.31 21.22.11.412',
  '2023.10.31 21.22.11.900',
  '2023.10.31 21.22.11.999Z',
  '2023.10.31 21.22.11.1000',
  '2023.10:31T21.22.11.100Z',
  '+10023..10:::31T21.22.11.102',
]

const re =
  /^(?<year>[0-9]{4}|\+(?:27575[0-9]|2757[0-4][0-9]|275[0-6][0-9]{2}|27[0-4][0-9]{3}|2[0-6][0-9]{4}|1[0-9]{5}|[1-9][0-9]{4}))(?:(?<d0>[^0-9])(?<month>0[1-9]|1[0-2])(?:(?<d1>[^0-9])(?<date>0[1-9]|[1-2][0-9]|3[0-1])(?:(?<d2>[^0-9])(?<hour>0[1-9]|1[0-9]|2[0-3])(?:(?<d3>[^0-9])(?<min>[0-5][0-9])(?:(?<d4>[^0-9])(?<sec>[0-5][0-9])(?:(?<d5>[^0-9])(?<ms>[0-9]{3})(?<d6>Z?))?)?)?)?)?)?$/

export function parseIsoLikeDate(str: string): IMatchGroups | null {
  const match = re.exec(str)
  if (!match || !match.groups) return null
  return match.groups as unknown as IMatchGroups
  // return objFilter(match.groups, (value) => !!value) as unknown as IMatchGroups
}

class BDate {
  static get isoDelims(): string[] {
    return ['-', '-', 'T', ':', ':', '.', 'Z']
  }

  readonly t: number

  #delims?: string[]

  constructor(...args: ConstructorParameters<typeof Date>) {
    if (args.length === 1 && typeof args[0] === 'string') {
      const parsed = parseIsoLikeDate(args[0])
      if (parsed) {
        args[0] = parseInt(parsed.year)
        if (parsed.month) args.push(parseInt(parsed.month) - 1)
        if (parsed.date) args.push(parseInt(parsed.date))
        if (parsed.hour) args.push(parseInt(parsed.hour))
        if (parsed.min) args.push(parseInt(parsed.min))
        if (parsed.sec) args.push(parseInt(parsed.sec))
        if (parsed.ms) args.push(parseInt(parsed.ms))
        if (parsed.d0) {
          const delims: string[] = [parsed.d0]
          if (parsed.d1) delims.push(parsed.d1)
          if (parsed.d2) delims.push(parsed.d2)
          if (parsed.d3) delims.push(parsed.d3)
          if (parsed.d4) delims.push(parsed.d4)
          if (parsed.d5) delims.push(parsed.d5)
          if (delims) this.#delims = delims
        }
      }
    } // else if (args.length >= 2 && typeof args[1] === 'number') {
    // args[1] = args[1] - 1
    //}
    this.t = new Date(...args).getTime()
  }

  get delims(): string[] {
    return this.#delims || BDate.isoDelims
  }
}

function parsedToIsoDateString(groups: IMatchGroups): string {
  return parsedToString(parsedToIsoDate(groups))
}

function parsedToString(groups: IMatchGroups): string {
  return Object.values(groups).join('')
}

interface IMatchGroups {
  year: string
  d0?: string
  month?: string
  d1?: string
  date?: string
  d2?: string
  hour?: string
  d3?: string
  min?: string
  d4?: string
  sec?: string
  d5?: string
  ms?: string
  d6?: string
}

const defaultIsoDate: Required<IMatchGroups> = {
  year: '0000',
  d0: '-',
  month: '01',
  d1: '-',
  date: '01',
  d2: 'T',
  hour: '00',
  d3: ':',
  min: '00',
  d4: ':',
  sec: '00',
  d5: '.',
  ms: '000',
  d6: 'Z',
}

function parsedToIsoDate(groups: IMatchGroups): Required<IMatchGroups> {
  const result = Object.assign({}, defaultIsoDate, groups)
  for (const [key, value] of Object.entries(defaultIsoDate)) {
    if (/^d[0-6]$/.test(key)) {
      Reflect.set(result, key, value)
    }
  }
  return result
}

function parsedToDate(groups: IMatchGroups): Date {
  return new Date(
    parseInt(groups.year),
    groups.month ? parseInt(groups.month) - 1 : 0,
    groups.date ? parseInt(groups.date) : 1,
    groups.hour ? parseInt(groups.hour) : 0,
    groups.min ? parseInt(groups.min) : 0,
    groups.sec ? parseInt(groups.sec) : 0,
    groups.ms ? parseInt(groups.ms) : 0
  )
}
function playground() {
  const now = '+275759-10-22T04:02:21.425'
  const parsed = parseIsoLikeDate(now)
  if (!parsed) throw new Error('No match')
  const str = parsedToIsoDateString(parsed)
  console.log(parsed)
  console.log(str)
}
